{"ast":null,"code":"var _jsxFileName = \"/Users/vitalii/Documents/GitHub/DevFront/src/context/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined); // here it shows that the value either exists or it doesn’t, and if not, undefined is passed as default\n\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [theme, setTheme] = useState(true);\n  const toggleTheme = () => {\n    setTheme(!theme);\n    document.documentElement.classList.toggle(\"dark\");\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"NFkfTb1CjTR5OR06wLa90hmbCgw=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","ThemeContext","undefined","useTheme","_s","context","Error","ThemeProvider","children","_s2","theme","setTheme","toggleTheme","document","documentElement","classList","toggle","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vitalii/Documents/GitHub/DevFront/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react'\n\ninterface ThemeContextType {\n  theme: boolean\n  toggleTheme: () => void\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode // ReactNode is a type that is used to define all possible metrics that can be passed as a children component.\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined) // here it shows that the value either exists or it doesn’t, and if not, undefined is passed as default\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext)\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider')\n  }\n  return context\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [theme, setTheme] = useState(true)\n\n  const toggleTheme = () => {\n    setTheme(!theme)\n    document.documentElement.classList.toggle(\"dark\")\n  }\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAmB,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAW7E,MAAMC,YAAY,gBAAGL,aAAa,CAA+BM,SAAS,CAAC,EAAC;;AAE5E,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGP,UAAU,CAACG,YAAY,CAAC;EACxC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAAAD,EAAA,CANYD,QAAQ;AAQrB,OAAO,MAAMI,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC3E,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMe,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAAC,CAACD,KAAK,CAAC;IAChBG,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,MAAM,CAAC;EACnD,CAAC;EAED,oBACEhB,OAAA,CAACC,YAAY,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAER,KAAK;MAAEE;IAAY,CAAE;IAAAJ,QAAA,EAClDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAAb,GAAA,CAbYF,aAA2C;AAAAgB,EAAA,GAA3ChB,aAA2C;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}